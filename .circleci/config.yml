version: 2
jobs:
  build:
    machine: true
    working_directory: ~/eventuate-local-java
    steps:
      - checkout
      - restore_cache:
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./gradlew testClasses
      - save_cache:
          paths:
            - ~/.gradle
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./scripts/build-and-test-mysql.sh
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  build-mariadb:
    machine: true
    working_directory: ~/eventuate-local-java
    steps:
      - checkout
      - restore_cache:
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./gradlew testClasses
      - save_cache:
          paths:
            - ~/.gradle
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./scripts/build-and-test-mariadb.sh
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  build-postgres-wal:
    machine: true
    working_directory: ~/eventuate-local-java
    steps:
      - checkout
      - restore_cache:
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./scripts/build-and-test-postgres-wal.sh
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  build-new-cdc-mysql:
    machine: true
    working_directory: ~/eventuate-local-java
    steps:
      - checkout
      - restore_cache:
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./scripts/build-and-test-all-new-cdc-mysql.sh
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  build-new-cdc-mariadb:
    machine: true
    working_directory: ~/eventuate-local-java
    steps:
      - checkout
      - restore_cache:
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./scripts/build-and-test-all-new-cdc-mariadb.sh
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  build-new-cdc-postgres-polling:
    machine: true
    working_directory: ~/eventuate-local-java
    steps:
      - checkout
      - restore_cache:
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./scripts/build-and-test-all-new-cdc-postgres-polling.sh
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  build-new-cdc-postgres-wal:
    machine: true
    working_directory: ~/eventuate-local-java
    steps:
      - checkout
      - restore_cache:
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./scripts/build-and-test-all-new-cdc-postgres-wal.sh
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  build-new-cdc-unified:
    machine: true
    working_directory: ~/eventuate-local-java
    steps:
      - checkout
      - restore_cache:
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./scripts/build-and-test-all-new-cdc-unified.sh
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  publish:
    machine: true
    working_directory: ~/eventuate-local-java
    steps:
      - checkout
      - restore_cache:
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run: TERM=dumb ./gradlew testClasses
      - save_cache:
          paths:
            - ~/.gradle
          key: eventuate-local-java-{{ checksum "build.gradle" }}
      - run:
          name: Publish artifacts
          command: |
            TERM=dumb ./scripts/deploy-artifacts.sh
          when: on_success
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - build-mariadb
      - build-postgres-wal:
          requires:
            - build
      - build-new-cdc-mysql:
          requires:
            - build
      - build-new-cdc-mariadb:
          requires:
            - build-mariadb
      - build-new-cdc-postgres-wal:
          requires:
            - build-postgres-wal
      - build-new-cdc-postgres-polling:
          requires:
            - build
      - build-new-cdc-unified:
          requires:
            - build-postgres-wal
      - publish:
          requires:
            - build-postgres-wal
            - build-new-cdc-mysql
            - build-new-cdc-mariadb
            - build-new-cdc-postgres-wal
            - build-new-cdc-postgres-polling
            - build-new-cdc-unified
